import { Injectable } from '@nestjs/common';
import { DomainEventHandler } from '@libs/ddd/domain/domain-events/domain-event-handler.base';
import { OrderAcceptedEvent } from '../domain/events/order-accepted.event';
import { OrderRequestGateway } from '../websocket/order-request.gateway';
import { UserRepository } from '../../../domain-repositories/user/user.repository';

@Injectable()
export class OrderAcceptedHandler extends DomainEventHandler {
  constructor(
    private readonly orderRequestGateway: OrderRequestGateway,
    private readonly userRepository: UserRepository,
  ) {
    super(OrderAcceptedEvent);
  }

  async handle(event: OrderAcceptedEvent): Promise<void> {
    const { aggregateId, driverId, clientId } = event;

    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è
      const driver = await this.userRepository.findOneById(driverId);
      if (!driver) {
        console.error(`‚ùå –í–æ–¥–∏—Ç–µ–ª—å ${driverId} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–æ–±—ã—Ç–∏—è OrderAccepted`);
        return;
      }

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ orderAccepted –∫–ª–∏–µ–Ω—Ç—É ${clientId}`);
      await this.orderRequestGateway.notifyClient(clientId, 'orderAccepted', {
        orderId: aggregateId,
        driverId,
        driver: driver.getPropsCopy(),
        timestamp: Date.now()
      });

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π —á—Ç–æ –∑–∞–∫–∞–∑ –∑–∞–Ω—è—Ç
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ orderTaken –≤—Å–µ–º –≤–æ–¥–∏—Ç–µ–ª—è–º`);
      await this.orderRequestGateway.broadcastToOnlineDrivers('orderTaken', {
        orderId: aggregateId,
        takenBy: driverId,
        timestamp: Date.now()
      });

      console.log(`‚úÖ –ó–∞–∫–∞–∑ ${aggregateId} –ø—Ä–∏–Ω—è—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–º ${driverId}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞:', error);
    }
  }
}
