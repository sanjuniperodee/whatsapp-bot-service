import { Injectable } from '@nestjs/common';
import { DomainEventHandler } from '@libs/ddd/domain/domain-events/domain-event-handler.base';
import { DriverArrivedEvent } from '../domain/events/driver-arrived.event';
import { OrderRequestGateway } from '../order-request.gateway';
import { UserRepository } from '../../../domain-repositories/user/user.repository';

@Injectable()
export class DriverArrivedHandler extends DomainEventHandler {
  constructor(
    private readonly orderRequestGateway: OrderRequestGateway,
    private readonly userRepository: UserRepository,
  ) {
    super(DriverArrivedEvent);
  }

  async handle(event: DriverArrivedEvent): Promise<void> {
    const { aggregateId, driverId, clientId } = event;

    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è
      const driver = await this.userRepository.findOneById(driverId);
      if (!driver) {
        console.error(`‚ùå –í–æ–¥–∏—Ç–µ–ª—å ${driverId} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–æ–±—ã—Ç–∏—è DriverArrived`);
        return;
      }

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —á—Ç–æ –≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–±—ã–ª (–Ω–∞ –º–µ—Å—Ç–µ)
      await this.orderRequestGateway.notifyClient(clientId, 'driverArrived', {
        orderId: aggregateId,
        driverId,
        driver: driver.getPropsCopy(),
        message: '–í–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–±—ã–ª –∏ –∂–¥–µ—Ç –≤–∞—Å',
        timestamp: Date.now()
      });

      console.log(`üöó –í–æ–¥–∏—Ç–µ–ª—å ${driverId} –ø—Ä–∏–±—ã–ª –∫ –∫–ª–∏–µ–Ω—Ç—É ${clientId} –¥–ª—è –∑–∞–∫–∞–∑–∞ ${aggregateId}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏–±—ã—Ç–∏—è –≤–æ–¥–∏—Ç–µ–ª—è:', error);
    }
  }
}
