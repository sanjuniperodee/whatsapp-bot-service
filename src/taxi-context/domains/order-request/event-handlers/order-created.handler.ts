import { Injectable } from '@nestjs/common';
import { DomainEventHandler } from '@libs/ddd/domain/domain-events/domain-event-handler.base';
import { OrderCreatedEvent } from '../domain/events/order-created.event';
import { OrderRequestGateway } from '../websocket/order-request.gateway';
import { CloudCacheStorageService } from '@third-parties/cloud-cache-storage/src';
import { UserRepository } from '../../../domain-repositories/user/user.repository';
import { UserOrmEntity } from '@infrastructure/database/entities/user.orm-entity';
import { OrderType } from '@infrastructure/enums';
import { NotificationService } from '@modules/firebase/notification.service';

@Injectable()
export class OrderCreatedHandler extends DomainEventHandler {
  constructor(
    private readonly orderRequestGateway: OrderRequestGateway,
    private readonly cacheStorageService: CloudCacheStorageService,
    private readonly userRepository: UserRepository,
    private readonly notificationService: NotificationService,
  ) {
    super(OrderCreatedEvent);
  }

  async handle(event: OrderCreatedEvent): Promise<void> {
    const { aggregateId, orderType, clientId, lat, lng } = event;

    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∑–∞–∫–∞–∑–∞ –≤ –∫–µ—à–µ
      await this.cacheStorageService.updateOrderLocation(aggregateId, lat, lng, orderType);

      // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
      const nearestDrivers = await this.cacheStorageService.findNearestDrivers(lat, lng);
      const drivers = await UserOrmEntity.query()
        .findByIds(nearestDrivers.map(id => String(id)))
        .withGraphFetched({ categoryLicenses: true });

      console.log(`üì¶ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ ${aggregateId}, –Ω–∞–π–¥–µ–Ω–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π: ${drivers.length}`);
      
      // –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –æ–Ω–ª–∞–π–Ω –≤–æ–¥–∏—Ç–µ–ª—è–º –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      await this.orderRequestGateway.broadcastToOnlineDrivers('newOrder', {
        id: aggregateId,
        from: event.from,
        to: event.to,
        price: event.price,
        orderType: orderType,
        clientId: clientId,
        lat,
        lng,
        timestamp: Date.now()
      });

      for (const driver of drivers) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–¥–∏—Ç–µ–ª—è
        const hasMatchingCategory = driver.categoryLicenses?.some(
          category => category.categoryType === orderType
        );

        const isDriverOnline = await this.cacheStorageService.isDriverOnline(driver.id);
        console.log(`üîç –í–æ–¥–∏—Ç–µ–ª—å ${driver.id}: –∫–∞—Ç–µ–≥–æ—Ä–∏—è=${hasMatchingCategory}, –æ–Ω–ª–∞–π–Ω=${isDriverOnline}, –Ω–µ –∫–ª–∏–µ–Ω—Ç=${clientId !== driver.id}`);

        // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å–∞–º–æ–º—É –∫–ª–∏–µ–Ω—Ç—É –µ—Å–ª–∏ –æ–Ω –≤–æ–¥–∏—Ç–µ–ª—å
        if (hasMatchingCategory && clientId !== driver.id) {
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–Ω–ª–∞–π–Ω –≤–æ–¥–∏—Ç–µ–ª—è–º
          if (isDriverOnline) {
            await this.orderRequestGateway.notifyDriver(driver.id, 'newOrder', {
              id: aggregateId,
              from: event.from,
              to: event.to,
              price: event.price,
              orderType: orderType,
              clientId: clientId,
              lat,
              lng,
              timestamp: Date.now()
            });
            console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–æ–¥–∏—Ç–µ–ª—é: ${driver.id}`);
          } else {
            console.log(`‚ö†Ô∏è –í–æ–¥–∏—Ç–µ–ª—å ${driver.id} –Ω–µ –æ–Ω–ª–∞–π–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ PUSH`);
          }

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å device token
          if (driver.deviceToken) {
            let categoryText = '';
            switch (orderType) {
              case OrderType.CARGO:
                categoryText = '–ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∞';
                break;
              case OrderType.DELIVERY:
                categoryText = '–î–æ—Å—Ç–∞–≤–∫–∞';
                break;
              case OrderType.INTERCITY_TAXI:
                categoryText = '–ú–µ–∂–≥–æ—Ä–æ–¥';
                break;
              case OrderType.TAXI:
                categoryText = '–¢–∞–∫—Å–∏';
            }

            await this.notificationService.sendNotificationByUserId(
              'Aday Go',
              `–ü–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è ${categoryText}`,
              driver.deviceToken
            );
          }
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
    }
  }
}
