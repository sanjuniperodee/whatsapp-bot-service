import { Injectable } from '@nestjs/common';
import { DomainEventHandler } from '@libs/ddd/domain/domain-events/domain-event-handler.base';
import { OrderStartedEvent } from '../domain/events/order-started.event';
import { OrderRequestGateway } from '../order-request.gateway';
import { UserRepository } from '../../../domain-repositories/user/user.repository';

@Injectable()
export class OrderStartedHandler extends DomainEventHandler {
  constructor(
    private readonly orderRequestGateway: OrderRequestGateway,
    private readonly userRepository: UserRepository,
  ) {
    super(OrderStartedEvent);
  }

  async handle(event: OrderStartedEvent): Promise<void> {
    const { aggregateId, driverId, clientId } = event;

    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è
      const driver = await this.userRepository.findOneById(driverId);
      if (!driver) {
        console.error(`‚ùå –í–æ–¥–∏—Ç–µ–ª—å ${driverId} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–æ–±—ã—Ç–∏—è OrderStarted`);
        return;
      }

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —á—Ç–æ –ø–æ–µ–∑–¥–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å
      await this.orderRequestGateway.notifyClient(clientId, 'rideStarted', {
        orderId: aggregateId,
        driverId,
        driver: driver.getPropsCopy(),
        message: '–ü–æ–µ–∑–¥–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å',
        timestamp: Date.now()
      });

      console.log(`üöÄ –ü–æ–µ–∑–¥–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å: –∑–∞–∫–∞–∑ ${aggregateId}, –≤–æ–¥–∏—Ç–µ–ª—å ${driverId}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞—á–∞–ª–∞ –ø–æ–µ–∑–¥–∫–∏:', error);
    }
  }
}
