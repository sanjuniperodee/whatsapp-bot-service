import { Injectable, NotFoundException } from '@nestjs/common';
import { UserRepository } from '../../../../domain-repositories/user/user.repository';
import { OrderRequestRepository } from '../../../../domain-repositories/order-request/order-request.repository';
import { OrderRequestGateway } from '../../websocket/order-request.gateway';
import { CloudCacheStorageService } from '@third-parties/cloud-cache-storage/src';
import { NotificationService } from '@modules/firebase/notification.service';

@Injectable()
export class RejectOrderService {
  constructor(
    private readonly userRepository: UserRepository,
    private readonly orderRequestRepository: OrderRequestRepository,
    private readonly orderRequestGateway: OrderRequestGateway,
    private readonly notificationService: NotificationService,
  ) {}

  async handle(orderId: string, driverId?: string, reason: string = 'rejected_by_driver') {
    const orderRequest = await this.orderRequestRepository.findOneById(orderId);
    if (!orderRequest) {
      throw new NotFoundException('Order not found');
    }

    const driver = await this.userRepository.findOneById(driverId || orderRequest?.getPropsCopy().driverId?.value || '');
    const client = await this.userRepository.findOneById(orderRequest.getPropsCopy().clientId.value);

    if (!driver || !client) {
      throw new NotFoundException('Driver or client not found');
    }

    // –ï—Å–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏–Ω—è–ª –∑–∞–∫–∞–∑, —Ç–æ —ç—Ç–æ –æ—Ç–º–µ–Ω–∞, –∞ –Ω–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
    const currentStatus = orderRequest.getPropsCopy().orderStatus;
    
    if (currentStatus === 'CREATED') {
      // –í–æ–¥–∏—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞–∫–∞–∑ (–Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç)
      // –ó–∞–∫–∞–∑ –æ—Å—Ç–∞–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è –¥—Ä—É–≥–∏—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
      await this.notificationService.sendNotificationByUserId(
        '–í–æ–¥–∏—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–∫–∞–∑',
        '–ü–æ–∏—Å–∫ –¥—Ä—É–≥–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è...',
        client.getPropsCopy().deviceToken || ''
      );
      
      // –ù–µ —É–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
      console.log(`üö´ –í–æ–¥–∏—Ç–µ–ª—å ${driver.id.value} –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–∫–∞–∑ ${orderId}`);
      
    } else {
      // –í–æ–¥–∏—Ç–µ–ª—å –æ—Ç–º–µ–Ω—è–µ—Ç —É–∂–µ –ø—Ä–∏–Ω—è—Ç—ã–π –∑–∞–∫–∞–∑
      orderRequest.rejectByDriver();
      await this.orderRequestRepository.save(orderRequest);

      await this.orderRequestGateway.notifyClient(orderRequest.getPropsCopy().clientId.value, 'orderCancelled', {
        orderId: orderRequest.id.value,
        driver: driver.getPropsCopy(),
        reason: reason || 'cancelled by driver',
        timestamp: Date.now()
      });

      await this.notificationService.sendNotificationByUserId(
        '–í–æ–¥–∏—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑',
        '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É',
        client.getPropsCopy().deviceToken || ''
      );
     }
  }
}