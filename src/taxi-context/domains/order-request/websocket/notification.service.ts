import { Injectable } from '@nestjs/common';
import { CloudCacheStorageService } from '@third-parties/cloud-cache-storage/src';
import { Logger } from '@libs/ddd/domain/ports/logger.port';
import { Inject } from '@nestjs/common';
import { Server, Socket } from 'socket.io';

@Injectable()
export class NotificationService {
  constructor(
    private readonly cacheStorageService: CloudCacheStorageService,
    @Inject('Logger') private readonly logger: Logger,
  ) {}

  async notifyClient(clientId: string, event: string, data: any, server?: Server): Promise<void> {
    try {
      console.log(`üîç [NOTIFICATION] –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ ${clientId} —Å–æ–±—ã—Ç–∏–µ–º ${event}`);
      
      const socketIds = await this.cacheStorageService.getSocketIds(clientId);
      console.log(`üîç [NOTIFICATION] Socket IDs –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${clientId}:`, socketIds);
      console.log(`üîç [NOTIFICATION] Server –¥–æ—Å—Ç—É–ø–µ–Ω:`, !!server);
      
      if (socketIds && socketIds.length > 0 && server) {
        console.log(`üì§ [NOTIFICATION] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ ${event} –Ω–∞ ${socketIds.length} —Å–æ–∫–µ—Ç–æ–≤`);
        
        let successCount = 0;
        const inactiveSockets = [];
        
        for (const socketId of socketIds) {
          try {
            const socket = server.sockets.sockets.get(socketId);
            if (socket && socket.connected) {
              socket.emit(event, data);
              successCount++;
            } else {
              console.log(`‚ö†Ô∏è [NOTIFICATION] –°–æ–∫–µ—Ç ${socketId} –∫–ª–∏–µ–Ω—Ç–∞ ${clientId} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, —É–¥–∞–ª—è–µ–º –∏–∑ Redis`);
              inactiveSockets.push(socketId);
            }
          } catch (error) {
            console.error(`‚ùå [NOTIFICATION] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–æ–∫–µ—Ç ${socketId}:`, error);
            inactiveSockets.push(socketId);
          }
        }
        
        // –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–∫–µ—Ç—ã –∏–∑ Redis
        for (const socketId of inactiveSockets) {
          try {
            await this.cacheStorageService.removeSocketId(clientId, socketId);
            console.log(`üßπ [NOTIFICATION] –£–¥–∞–ª–µ–Ω –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π —Å–æ–∫–µ—Ç ${socketId} –∫–ª–∏–µ–Ω—Ç–∞ ${clientId} –∏–∑ Redis`);
          } catch (error) {
            console.error(`‚ùå [NOTIFICATION] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–∫–µ—Ç–∞ ${socketId} –∏–∑ Redis:`, error);
          }
        }
        
        this.logger.debug(`Notification sent to client ${clientId}: ${event} on ${successCount}/${socketIds.length} sockets`);
        console.log(`‚úÖ [NOTIFICATION] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${successCount}/${socketIds.length} —Å–æ–∫–µ—Ç–æ–≤`);
      } else {
        console.log(`‚ùå [NOTIFICATION] –ö–ª–∏–µ–Ω—Ç ${clientId} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
        this.logger.warn(`Client ${clientId} not found or server not available`);
      }
    } catch (error) {
      console.error(`‚ùå [NOTIFICATION] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ ${clientId}:`, error);
      this.logger.error(`Failed to notify client ${clientId}:`, error);
    }
  }

  async notifyDriver(driverId: string, event: string, data: any, server?: Server): Promise<void> {
    try {
      console.log(`üîç [NOTIFICATION] –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è ${driverId} —Å–æ–±—ã—Ç–∏–µ–º ${event}`);
      
      const socketIds = await this.cacheStorageService.getSocketIds(driverId);
      console.log(`üîç [NOTIFICATION] Socket IDs –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è ${driverId}:`, socketIds);
      
      if (socketIds && socketIds.length > 0 && server) {
        console.log(`üì§ [NOTIFICATION] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ ${event} –Ω–∞ ${socketIds.length} —Å–æ–∫–µ—Ç–æ–≤`);
        
        let successCount = 0;
        const inactiveSockets = [];
        
        for (const socketId of socketIds) {
          try {
            const socket = server.sockets.sockets.get(socketId);
            if (socket && socket.connected) {
              socket.emit(event, data);
              successCount++;
            } else {
              console.log(`‚ö†Ô∏è [NOTIFICATION] –°–æ–∫–µ—Ç ${socketId} –≤–æ–¥–∏—Ç–µ–ª—è ${driverId} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, —É–¥–∞–ª—è–µ–º –∏–∑ Redis`);
              inactiveSockets.push(socketId);
            }
          } catch (error) {
            console.error(`‚ùå [NOTIFICATION] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–æ–∫–µ—Ç ${socketId}:`, error);
            inactiveSockets.push(socketId);
          }
        }
        
        // –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–∫–µ—Ç—ã –∏–∑ Redis
        for (const socketId of inactiveSockets) {
          try {
            await this.cacheStorageService.removeSocketId(driverId, socketId);
            console.log(`üßπ [NOTIFICATION] –£–¥–∞–ª–µ–Ω –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π —Å–æ–∫–µ—Ç ${socketId} –≤–æ–¥–∏—Ç–µ–ª—è ${driverId} –∏–∑ Redis`);
          } catch (error) {
            console.error(`‚ùå [NOTIFICATION] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–∫–µ—Ç–∞ ${socketId} –∏–∑ Redis:`, error);
          }
        }
        
        // –ï—Å–ª–∏ —É –≤–æ–¥–∏—Ç–µ–ª—è –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–∫–µ—Ç–æ–≤, —É–±–∏—Ä–∞–µ–º –µ–≥–æ –∏–∑ –æ–Ω–ª–∞–π–Ω
        if (successCount === 0 && socketIds.length > 0) {
          const hasActiveSockets = await this.cacheStorageService.hasActiveSockets(driverId);
          if (!hasActiveSockets) {
            await this.cacheStorageService.setDriverOffline(driverId);
            console.log(`üî¥ [NOTIFICATION] –í–æ–¥–∏—Ç–µ–ª—å ${driverId} —É–±—Ä–∞–Ω –∏–∑ –æ–Ω–ª–∞–π–Ω (–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–∫–µ—Ç–æ–≤)`);
          }
        }
        
        this.logger.debug(`Notification sent to driver ${driverId}: ${event} on ${successCount}/${socketIds.length} sockets`);
        console.log(`‚úÖ [NOTIFICATION] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${successCount}/${socketIds.length} —Å–æ–∫–µ—Ç–æ–≤`);
      } else {
        console.log(`‚ùå [NOTIFICATION] –í–æ–¥–∏—Ç–µ–ª—å ${driverId} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
        this.logger.warn(`Driver ${driverId} not found or server not available`);
      }
    } catch (error) {
      console.error(`‚ùå [NOTIFICATION] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è ${driverId}:`, error);
      this.logger.error(`Failed to notify driver ${driverId}:`, error);
    }
  }

  async broadcastToOnlineDrivers(event: string, data: any, server?: Server): Promise<void> {
    try {
      if (!server) {
        this.logger.warn('Server not available for broadcast');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –æ–Ω–ª–∞–π–Ω –≤–æ–¥–∏—Ç–µ–ª–µ–π
      const onlineDrivers = await this.cacheStorageService.getOnlineDrivers();
      console.log(`üì¢ [BROADCAST] –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–±—ã—Ç–∏–µ ${event} ${onlineDrivers.length} –æ–Ω–ª–∞–π–Ω –≤–æ–¥–∏—Ç–µ–ª—è–º`);
      
      let totalSockets = 0;
      let activeSockets = 0;
      
      for (const driverId of onlineDrivers) {
        const socketIds = await this.cacheStorageService.getSocketIds(driverId);
        totalSockets += socketIds.length;
        
        for (const socketId of socketIds) {
          try {
            const socket = server.sockets.sockets.get(socketId);
            if (socket && socket.connected) {
              socket.emit(event, data);
              activeSockets++;
            } else {
              // –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π —Å–æ–∫–µ—Ç
              await this.cacheStorageService.removeSocketId(driverId, socketId);
            }
          } catch (error) {
            console.error(`‚ùå [BROADCAST] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–æ–∫–µ—Ç ${socketId}:`, error);
            await this.cacheStorageService.removeSocketId(driverId, socketId);
          }
        }
      }

      this.logger.debug(`Broadcast sent to ${activeSockets}/${totalSockets} sockets of ${onlineDrivers.length} online drivers: ${event}`);
      console.log(`üì¢ [BROADCAST] –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${activeSockets}/${totalSockets} —Å–æ–∫–µ—Ç–æ–≤`);
    } catch (error) {
      console.error(`‚ùå [BROADCAST] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –≤–æ–¥–∏—Ç–µ–ª—è–º:`, error);
      this.logger.error(`Failed to broadcast to online drivers:`, error);
    }
  }

  async broadcastToOnlineClients(event: string, data: any, server?: Server): Promise<void> {
    try {
      if (!server) {
        this.logger.warn('Server not available for broadcast');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –æ–Ω–ª–∞–π–Ω –∫–ª–∏–µ–Ω—Ç–æ–≤
      const onlineClients = await this.cacheStorageService.getOnlineClients();
      console.log(`üì¢ [BROADCAST] –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–±—ã—Ç–∏–µ ${event} ${onlineClients.length} –æ–Ω–ª–∞–π–Ω –∫–ª–∏–µ–Ω—Ç–∞–º`);
      
      let totalSockets = 0;
      let activeSockets = 0;
      
      for (const clientId of onlineClients) {
        const socketIds = await this.cacheStorageService.getSocketIds(clientId);
        totalSockets += socketIds.length;
        
        for (const socketId of socketIds) {
          try {
            const socket = server.sockets.sockets.get(socketId);
            if (socket && socket.connected) {
              socket.emit(event, data);
              activeSockets++;
            } else {
              // –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π —Å–æ–∫–µ—Ç
              await this.cacheStorageService.removeSocketId(clientId, socketId);
            }
          } catch (error) {
            console.error(`‚ùå [BROADCAST] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–æ–∫–µ—Ç ${socketId}:`, error);
            await this.cacheStorageService.removeSocketId(clientId, socketId);
          }
        }
      }

      this.logger.debug(`Broadcast sent to ${activeSockets}/${totalSockets} sockets of ${onlineClients.length} online clients: ${event}`);
      console.log(`üì¢ [BROADCAST] –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${activeSockets}/${totalSockets} —Å–æ–∫–µ—Ç–æ–≤`);
    } catch (error) {
      console.error(`‚ùå [BROADCAST] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –∫–ª–∏–µ–Ω—Ç–∞–º:`, error);
      this.logger.error(`Failed to broadcast to online clients:`, error);
    }
  }
}
