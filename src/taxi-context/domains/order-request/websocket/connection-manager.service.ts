import { Injectable } from '@nestjs/common';
import { CloudCacheStorageService } from '@third-parties/cloud-cache-storage/src';
import { Logger } from '@libs/ddd/domain/ports/logger.port';
import { Inject } from '@nestjs/common';

@Injectable()
export class ConnectionManagerService {
  constructor(
    private readonly cacheStorageService: CloudCacheStorageService,
    @Inject('Logger') private readonly logger: Logger,
  ) {}

  async handleConnection(socketId: string, userId: string, userType: 'client' | 'driver'): Promise<void> {
    try {
      console.log(`üîç [CONNECTION] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: socketId=${socketId}, userId=${userId}, userType=${userType}`);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å socketId -> userId
      await this.cacheStorageService.setSocketUser(socketId, userId);
      console.log(`‚úÖ [CONNECTION] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–≤—è–∑—å socketId -> userId`);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∫–µ—Ç –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–∫–µ—Ç–æ–≤)
      await this.cacheStorageService.addSocketId(userId, socketId);
      console.log(`‚úÖ [CONNECTION] Socket ${socketId} –¥–æ–±–∞–≤–ª–µ–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
      
      if (userType === 'driver') {
        await this.cacheStorageService.setDriverOnline(userId);
        console.log(`‚úÖ [CONNECTION] –í–æ–¥–∏—Ç–µ–ª—å ${userId} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–Ω–ª–∞–π–Ω`);
        this.logger.debug(`Driver ${userId} connected with socket ${socketId}`);
      } else {
        await this.cacheStorageService.addOnlineClient(userId);
        console.log(`‚úÖ [CONNECTION] –ö–ª–∏–µ–Ω—Ç ${userId} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–Ω–ª–∞–π–Ω`);
        this.logger.debug(`Client ${userId} connected with socket ${socketId}`);
      }
      
      console.log(`üéâ [CONNECTION] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ`);
    } catch (error) {
      console.error(`‚ùå [CONNECTION] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:`, error);
      this.logger.error(`Failed to handle connection for user ${userId}:`, error);
      throw error;
    }
  }

  async handleDisconnection(socketId: string): Promise<void> {
    try {
      console.log(`üîç [DISCONNECTION] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–∫–µ—Ç–∞: ${socketId}`);
      
      const userId = await this.cacheStorageService.getSocketUser(socketId);
      if (userId) {
        console.log(`üîç [DISCONNECTION] –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –¥–ª—è —Å–æ–∫–µ—Ç–∞ ${socketId}`);
        
        // –£–¥–∞–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–æ–∫–µ—Ç –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å–æ–∫–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await this.cacheStorageService.removeSocketId(userId, socketId);
        console.log(`‚úÖ [DISCONNECTION] Socket ${socketId} —É–¥–∞–ª–µ–Ω –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å–æ–∫–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        
        // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å socketId -> userId
        await this.cacheStorageService.removeSocketUser(socketId);
        console.log(`‚úÖ [DISCONNECTION] –°–≤—è–∑—å socketId -> userId —É–¥–∞–ª–µ–Ω–∞`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–∫–µ—Ç—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const hasActiveSockets = await this.cacheStorageService.hasActiveSockets(userId);
        console.log(`üîç [DISCONNECTION] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –æ—Å—Ç–∞–ª–∏—Å—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–∫–µ—Ç—ã: ${hasActiveSockets}`);
        
        if (!hasActiveSockets) {
          // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–∫–µ—Ç–æ–≤, —É–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–Ω–ª–∞–π–Ω
          const isDriver = await this.cacheStorageService.isDriverOnline(userId);
          const isClient = await this.cacheStorageService.isClientOnline(userId);
          
          if (isDriver) {
            await this.cacheStorageService.setDriverOffline(userId);
            console.log(`üî¥ [DISCONNECTION] –í–æ–¥–∏—Ç–µ–ª—å ${userId} —É–±—Ä–∞–Ω –∏–∑ –æ–Ω–ª–∞–π–Ω (–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–∫–µ—Ç–æ–≤)`);
          }
          if (isClient) {
            await this.cacheStorageService.removeOnlineClient(userId);
            console.log(`üî¥ [DISCONNECTION] –ö–ª–∏–µ–Ω—Ç ${userId} —É–±—Ä–∞–Ω –∏–∑ –æ–Ω–ª–∞–π–Ω (–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–∫–µ—Ç–æ–≤)`);
          }
        }
        
        this.logger.debug(`User ${userId} disconnected from socket ${socketId}`);
        console.log(`‚úÖ [DISCONNECTION] –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ`);
      } else {
        console.log(`‚ö†Ô∏è [DISCONNECTION] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–æ–∫–µ—Ç–∞ ${socketId}`);
      }
      
      this.logger.debug(`Socket ${socketId} disconnected`);
    } catch (error) {
      console.error(`‚ùå [DISCONNECTION] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:`, error);
      this.logger.error(`Failed to handle disconnection for socket ${socketId}:`, error);
    }
  }

  async handleReconnect(socketId: string, userId: string, userType: 'client' | 'driver'): Promise<void> {
    try {
      console.log(`üîç [RECONNECT] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: socketId=${socketId}, userId=${userId}, userType=${userType}`);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Å–æ–∫–µ—Ç –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º)
      await this.handleConnection(socketId, userId, userType);
      
      this.logger.debug(`User ${userId} reconnected with socket ${socketId}`);
      console.log(`‚úÖ [RECONNECT] –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ`);
    } catch (error) {
      console.error(`‚ùå [RECONNECT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:`, error);
      this.logger.error(`Failed to handle reconnect for user ${userId}:`, error);
      throw error;
    }
  }

  async isUserOnline(userId: string): Promise<boolean> {
    try {
      const hasActiveSockets = await this.cacheStorageService.hasActiveSockets(userId);
      return hasActiveSockets;
    } catch (error) {
      this.logger.error(`Failed to check online status for user ${userId}:`, error);
      return false;
    }
  }

  async getUserSockets(userId: string): Promise<string[]> {
    try {
      return await this.cacheStorageService.getSocketIds(userId);
    } catch (error) {
      this.logger.error(`Failed to get sockets for user ${userId}:`, error);
      return [];
    }
  }

  async getSocketUser(socketId: string): Promise<string | null> {
    try {
      return await this.cacheStorageService.getSocketUser(socketId);
    } catch (error) {
      this.logger.error(`Failed to get user for socket ${socketId}:`, error);
      return null;
    }
  }
}
