import {
  OnGatewayConnection,
  OnGatewayDisconnect,
  SubscribeMessage,
  WebSocketGateway,
  WebSocketServer,
} from '@nestjs/websockets';
import { Server, Socket } from 'socket.io';
import { OrderRequestRepository } from '../../domain-repositories/order-request/order-request.repository';
import { OrderRequestEntity } from '@domain/order-request/domain/entities/order-request.entity';
import { CloudCacheStorageService } from '@third-parties/cloud-cache-storage/src';
import { UserRepository } from '../../domain-repositories/user/user.repository';
import { UserEntity } from '@domain/user/domain/entities/user.entity';
import { OrderStatus, OrderType } from '@infrastructure/enums';
import { UUID } from '@libs/ddd/domain/value-objects/uuid.value-object';
import { UserOrmEntity } from '@infrastructure/database/entities/user.orm-entity';
import { NotificationService } from '@modules/firebase/notification.service';

@WebSocketGateway({
  path: '/socket.io/',
  cors: {
    origin: '*',
    methods: ['GET', 'POST'],
    credentials: true,
  },
  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
  transports: ['websocket', 'polling'],
  pingTimeout: 60000, // 60 —Å–µ–∫—É–Ω–¥
  pingInterval: 25000, // 25 —Å–µ–∫—É–Ω–¥
  upgradeTimeout: 10000, // 10 —Å–µ–∫—É–Ω–¥
  maxHttpBufferSize: 1e6, // 1MB
  allowEIO3: true, // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π
})
export class OrderRequestGateway implements OnGatewayConnection, OnGatewayDisconnect {

  @WebSocketServer() server: Server;

  // –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –ø–æ —Ç–∏–ø–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  private clientConnections = new Map<string, Set<string>>(); // userId -> Set<socketId>
  private driverConnections = new Map<string, Set<string>>(); // driverId -> Set<socketId>
  private onlineDrivers = new Set<string>(); // Set<driverId>
  
  // –õ–∏–º–∏—Ç—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  private readonly MAX_CONNECTIONS_PER_USER = 3; // –ú–∞–∫—Å–∏–º—É–º 3 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  private readonly MAX_TOTAL_CONNECTIONS = 1000; // –ú–∞–∫—Å–∏–º—É–º 1000 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤—Å–µ–≥–æ

  constructor(
    private readonly orderRequestRepository: OrderRequestRepository,
    private readonly cacheStorageService: CloudCacheStorageService,
    private readonly userRepository: UserRepository,
    private readonly notificationService: NotificationService,
  ) {}

  async handleConnection(client: Socket) {
    try {
      const { userType, userId, driverId, sessionId, lat, lng } = client.handshake.query as any;
      
      console.log(`üîå –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: userType=${userType}, userId=${userId}, driverId=${driverId}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π –ª–∏–º–∏—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
      const totalConnections = this.getTotalConnections();
      if (totalConnections >= this.MAX_TOTAL_CONNECTIONS) {
        console.log(`‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (${totalConnections}/${this.MAX_TOTAL_CONNECTIONS})`);
        client.disconnect();
        return;
      }

      if (!sessionId) {
        console.log('‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç sessionId');
        client.disconnect();
        return;
      }

      if (userType === 'client') {
        await this.handleClientConnection(client, userId, sessionId);
      } else if (userType === 'driver') {
        await this.handleDriverConnection(client, driverId, sessionId, lat, lng);
      } else {
        console.log(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userType}`);
        client.disconnect();
        return;
      }

      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω: ${userType} - ${userId || driverId}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:', error);
      client.disconnect();
    }
  }

  private async handleClientConnection(client: Socket, userId: string, sessionId: string) {
    if (!userId) {
      client.disconnect();
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userConnections = this.clientConnections.get(userId);
    if (userConnections && userConnections.size >= this.MAX_CONNECTIONS_PER_USER) {
      console.log(`‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ ${userId}: –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (${userConnections.size}/${this.MAX_CONNECTIONS_PER_USER})`);
      client.disconnect();
      return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    if (!this.clientConnections.has(userId)) {
      this.clientConnections.set(userId, new Set());
    }
    this.clientConnections.get(userId)!.add(client.id);

    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –∫ –∫–æ–º–Ω–∞—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞
    client.join(`client_${userId}`);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
    await this.cacheStorageService.addSocketId(userId, client.id);

    console.log(`üì± –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: ${userId}`);
  }

  private async handleDriverConnection(client: Socket, driverId: string, sessionId: string, lat?: string, lng?: string) {
    console.log(`üöó –í–æ–¥–∏—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è: ${driverId}, —Å–µ—Å—Å–∏—è: ${sessionId}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è
    const driverConnections = this.driverConnections.get(driverId);
    if (driverConnections && driverConnections.size >= this.MAX_CONNECTIONS_PER_USER) {
      console.log(`‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è ${driverId}: –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (${driverConnections.size}/${this.MAX_CONNECTIONS_PER_USER})`);
      client.disconnect();
      return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç—É –µ–≥–æ ID –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    client.join(`driver_${driverId}`);
    
    // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–Ω–ª–∞–π–Ω –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–æ–∫–µ—Ç—É
    this.onlineDrivers.add(driverId);
    client.join('online_drivers');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ Map –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –≤–æ–¥–∏—Ç–µ–ª–µ–π
    if (!this.driverConnections.has(driverId)) {
      this.driverConnections.set(driverId, new Set());
    }
    this.driverConnections.get(driverId)!.add(client.id);
    
    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã - –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    if (lat && lng) {
      try {
        await this.cacheStorageService.updateDriverLocation(driverId, lat, lng);
        console.log(`üìç –û–±–Ω–æ–≤–ª–µ–Ω–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è ${driverId}: ${lat}, ${lng}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è ${driverId}:`, error);
      }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å —Å–æ–∫–µ—Ç–∞ —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º
    client.data.driverId = driverId;
    client.data.userType = 'driver';
    
    console.log(`‚úÖ –í–æ–¥–∏—Ç–µ–ª—å ${driverId} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω (—Å–æ–∫–µ—Ç: ${client.id})`);
    console.log(`üü¢ –í–æ–¥–∏—Ç–µ–ª—å ${driverId} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–Ω–ª–∞–π–Ω (–≤—Å–µ–≥–æ –æ–Ω–ª–∞–π–Ω: ${this.onlineDrivers.size})`);
  }

  async handleDisconnect(client: Socket) {
    try {
      const { userType, userId, driverId } = client.handshake.query as any;

      if (userType === 'client' && userId) {
        await this.handleClientDisconnection(client, userId);
      } else if (userType === 'driver' && driverId) {
        await this.handleDriverDisconnection(client, driverId);
      }

      console.log(`üîå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–µ–Ω: ${userType} - ${userId || driverId}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏:', error);
    }
  }

  private async handleClientDisconnection(client: Socket, userId: string) {
    // –£–¥–∞–ª—è–µ–º –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    const clientSockets = this.clientConnections.get(userId);
    if (clientSockets) {
      clientSockets.delete(client.id);
      if (clientSockets.size === 0) {
        this.clientConnections.delete(userId);
      }
    }

    // –ü–æ–∫–∏–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—ã
    client.leave(`client_${userId}`);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
    await this.cacheStorageService.removeSocketId(userId, client.id);

    console.log(`üì± –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω: ${userId}`);
  }

  private async handleDriverDisconnection(client: Socket, driverId: string) {
    // –£–¥–∞–ª—è–µ–º –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –≤–æ–¥–∏—Ç–µ–ª–µ–π
    const driverSockets = this.driverConnections.get(driverId);
    if (driverSockets) {
      driverSockets.delete(client.id);
      if (driverSockets.size === 0) {
        this.driverConnections.delete(driverId);
        this.onlineDrivers.delete(driverId); // –í–æ–¥–∏—Ç–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ –æ–Ω–ª–∞–π–Ω
      }
    }

    // –ü–æ–∫–∏–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—ã
    client.leave(`driver_${driverId}`);
    client.leave('all_drivers');

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
    await this.cacheStorageService.removeSocketId(driverId, client.id);

    console.log(`üöó –í–æ–¥–∏—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–µ–Ω: ${driverId}`);
  }

  @SubscribeMessage('driverOnline')
  async handleDriverOnline(client: Socket, data: any) {
    const driverId = client.handshake.query.driverId as string;
    if (driverId) {
      this.onlineDrivers.add(driverId);
      client.join('online_drivers');
      console.log(`üü¢ –í–æ–¥–∏—Ç–µ–ª—å –≤—ã—à–µ–ª –æ–Ω–ª–∞–π–Ω: ${driverId} (–≤—Å–µ–≥–æ –æ–Ω–ª–∞–π–Ω: ${this.onlineDrivers.size})`);
    } else {
      console.log(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–π—Ç–∏ –æ–Ω–ª–∞–π–Ω –±–µ–∑ driverId`);
    }
  }

  @SubscribeMessage('driverOffline')
  async handleDriverOffline(client: Socket, data: any) {
    const driverId = client.handshake.query.driverId as string;
    if (driverId) {
      this.onlineDrivers.delete(driverId);
      client.leave('online_drivers');
      console.log(`üî¥ –í–æ–¥–∏—Ç–µ–ª—å —É—à–µ–ª –æ—Ñ—Ñ–ª–∞–π–Ω: ${driverId}`);
    }
  }

  @SubscribeMessage('ping')
  async handlePing(client: Socket, data: any) {
    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ ping —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    client.emit('pong', { 
      timestamp: Date.now(),
      received: data?.timestamp || Date.now()
    });
    console.log(`üíì Ping –ø–æ–ª—É—á–µ–Ω –æ—Ç ${client.handshake.query.userType}: ${client.handshake.query.userId || client.handshake.query.driverId}`);
  }

  @SubscribeMessage('driverLocationUpdate')
  async handleDriverLocationUpdate(client: Socket, data: { lat: number, lng: number, timestamp?: number }) {
    const driverId = client.handshake.query.driverId as string;
    if (!driverId) return;

    const { lat, lng } = data;
    
    try {
      // –í–°–ï–ì–î–ê –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –∫–µ—à–µ, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –Ω–∞–ª–∏—á–∏—è –∑–∞–∫–∞–∑–∞
      await this.cacheStorageService.updateDriverLocation(driverId, String(lat), String(lng));

      // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –≤–æ–¥–∏—Ç–µ–ª—è
      const orderRequest = await this.orderRequestRepository.findActiveByDriverId(driverId);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–ª–∏–µ–Ω—Ç—É –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑
      if (orderRequest) {
        const clientId = orderRequest.getPropsCopy().clientId.value;
        const orderStatus = orderRequest.getPropsCopy().orderStatus;
        
        console.log(`üìç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤–æ–¥–∏—Ç–µ–ª—è ${driverId} –∫–ª–∏–µ–Ω—Ç—É ${clientId}, —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: ${orderStatus}`);
        
        await this.notifyClient(clientId, 'driverLocation', {
          lat,
          lng,
          driverId,
          orderId: orderRequest.id.value,
          orderStatus: orderStatus,
          timestamp: data.timestamp || Date.now()
        });
      } else {
        console.log(`üìç –í–æ–¥–∏—Ç–µ–ª—å ${driverId} –æ–±–Ω–æ–≤–∏–ª –ø–æ–∑–∏—Ü–∏—é, –Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç`);
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ª–æ–≥–æ–≤)
      // console.log(`üìç –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è ${driverId}: ${lat}, ${lng}`);
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è ${driverId}:`, error);
    }
  }

  // === –ú–ï–¢–û–î–´ –î–õ–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ===

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
  async notifyClient(userId: string, event: string, data: any) {
    this.server.to(`client_${userId}`).emit(event, data);
    console.log(`üì± –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É ${userId}: ${event}`);
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
  async notifyDriver(driverId: string, event: string, data: any) {
    this.server.to(`driver_${driverId}`).emit(event, data);
    console.log(`üöó –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–æ–¥–∏—Ç–µ–ª—é ${driverId}: ${event}`);
  }

  // –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –æ–Ω–ª–∞–π–Ω –≤–æ–¥–∏—Ç–µ–ª—è–º
  async broadcastToOnlineDrivers(event: string, data: any) {
    this.server.to('online_drivers').emit(event, data);
    console.log(`üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –æ–Ω–ª–∞–π–Ω –≤–æ–¥–∏—Ç–µ–ª—è–º: ${event}`);
  }

  async handleOrderCreated(orderRequest: OrderRequestEntity) {
    const lat = orderRequest.getPropsCopy().lat;
    const lng = orderRequest.getPropsCopy().lng;
    const orderType = orderRequest.getPropsCopy().orderType;
    const clientId = orderRequest.getPropsCopy().clientId.value;

    if (!lat || !lng) {
      throw new Error('Latitude and Longitude are required');
    }

    try {
      // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
      const nearestDrivers = await this.cacheStorageService.findNearestDrivers(lat, lng);
      const drivers = await UserOrmEntity.query()
        .findByIds(nearestDrivers.map(id => String(id)))
        .withGraphFetched({ categoryLicenses: true });

      console.log(`üì¶ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ ${orderRequest.id.value}, –Ω–∞–π–¥–µ–Ω–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π: ${drivers.length}`);
      
      // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –æ–Ω–ª–∞–π–Ω –≤–æ–¥–∏—Ç–µ–ª—è–º –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
      console.log(`üì¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–Ω–ª–∞–π–Ω –≤–æ–¥–∏—Ç–µ–ª–µ–π: ${this.onlineDrivers.size}`);
      console.log(`üì¢ –°–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω –≤–æ–¥–∏—Ç–µ–ª–µ–π: ${Array.from(this.onlineDrivers).join(', ')}`);
      
      // –†–∞—Å—Å—ã–ª–∞–µ–º –∑–∞–∫–∞–∑ –≤—Å–µ–º –æ–Ω–ª–∞–π–Ω –≤–æ–¥–∏—Ç–µ–ª—è–º –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      await this.broadcastToOnlineDrivers('newOrder', {
        id: orderRequest.id.value,
        from: orderRequest.getPropsCopy().from,
        to: orderRequest.getPropsCopy().to,
        price: orderRequest.getPropsCopy().price,
        orderType: orderType,
        clientId: clientId,
        lat,
        lng,
        timestamp: Date.now()
      });

      for (const driver of drivers) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–¥–∏—Ç–µ–ª—è
        const hasMatchingCategory = driver.categoryLicenses?.some(
          category => category.categoryType === orderType
        );

        console.log(`üîç –í–æ–¥–∏—Ç–µ–ª—å ${driver.id}: –∫–∞—Ç–µ–≥–æ—Ä–∏—è=${hasMatchingCategory}, –æ–Ω–ª–∞–π–Ω=${this.onlineDrivers.has(driver.id)}, –Ω–µ –∫–ª–∏–µ–Ω—Ç=${clientId !== driver.id}`);

        // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å–∞–º–æ–º—É –∫–ª–∏–µ–Ω—Ç—É –µ—Å–ª–∏ –æ–Ω –≤–æ–¥–∏—Ç–µ–ª—å
        if (hasMatchingCategory && clientId !== driver.id) {
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–Ω–ª–∞–π–Ω –≤–æ–¥–∏—Ç–µ–ª—è–º
          if (this.onlineDrivers.has(driver.id)) {
            await this.notifyDriver(driver.id, 'newOrder', {
              id: orderRequest.id.value,
              from: orderRequest.getPropsCopy().from,
              to: orderRequest.getPropsCopy().to,
              price: orderRequest.getPropsCopy().price,
              orderType: orderType,
              clientId: clientId,
              lat,
              lng,
              timestamp: Date.now()
            });
            console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–æ–¥–∏—Ç–µ–ª—é: ${driver.id}`);
          } else {
            console.log(`‚ö†Ô∏è –í–æ–¥–∏—Ç–µ–ª—å ${driver.id} –Ω–µ –æ–Ω–ª–∞–π–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ PUSH`);
          }

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å device token
          if (driver.deviceToken) {
            let categoryText = '';
            switch (orderType) {
              case OrderType.CARGO:
                categoryText = '–ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∞';
                break;
              case OrderType.DELIVERY:
                categoryText = '–î–æ—Å—Ç–∞–≤–∫–∞';
                break;
              case OrderType.INTERCITY_TAXI:
                categoryText = '–ú–µ–∂–≥–æ—Ä–æ–¥';
                break;
              case OrderType.TAXI:
                categoryText = '–¢–∞–∫—Å–∏';
            }

            await this.notificationService.sendNotificationByUserId(
              'Aday Go',
              `–ü–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è ${categoryText}`,
              driver.deviceToken
            );
          }
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
    }
  }

  async handleOrderRejected(userId: string) {
    try {
      await this.notifyClient(userId, 'orderRejected', {
        timestamp: Date.now()
      });
      
      console.log(`‚ùå –ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${userId}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
    }
  }

  async handleOrderAccepted(orderRequest: OrderRequestEntity, driver: UserEntity) {
    const clientId = orderRequest.getPropsCopy().clientId.value;
    const orderId = orderRequest.id.value;
    const driverId = driver.id.value;

    console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞: orderId=${orderId}, clientId=${clientId}, driverId=${driverId}`);

    try {
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ orderAccepted –∫–ª–∏–µ–Ω—Ç—É ${clientId}`);
      await this.notifyClient(clientId, 'orderAccepted', {
        orderId,
        driverId,
        driver: driver.getPropsCopy(),
        order: orderRequest.getPropsCopy(),
        timestamp: Date.now()
      });

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π —á—Ç–æ –∑–∞–∫–∞–∑ –∑–∞–Ω—è—Ç
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ orderTaken –≤—Å–µ–º –≤–æ–¥–∏—Ç–µ–ª—è–º`);
      await this.broadcastToOnlineDrivers('orderTaken', {
        orderId,
        takenBy: driverId,
        timestamp: Date.now()
      });

      console.log(`‚úÖ –ó–∞–∫–∞–∑ ${orderId} –ø—Ä–∏–Ω—è—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–º ${driverId}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞:', error);
    }
  }

  async handleDriverArrived(orderRequest: OrderRequestEntity, driver: UserEntity) {
    const clientId = orderRequest.getPropsCopy().clientId.value;
    const orderId = orderRequest.id.value;
    const driverId = driver.id.value;

    try {
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —á—Ç–æ –≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–±—ã–ª (–Ω–∞ –º–µ—Å—Ç–µ)
      await this.notifyClient(clientId, 'driverArrived', {
        orderId,
        driverId,
        driver: driver.getPropsCopy(),
        order: orderRequest.getPropsCopy(),
        message: '–í–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–±—ã–ª –∏ –∂–¥–µ—Ç –≤–∞—Å',
        timestamp: Date.now()
      });

      console.log(`üöó –í–æ–¥–∏—Ç–µ–ª—å ${driverId} –ø—Ä–∏–±—ã–ª –∫ –∫–ª–∏–µ–Ω—Ç—É ${clientId} –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏–±—ã—Ç–∏—è –≤–æ–¥–∏—Ç–µ–ª—è:', error);
    }
  }

  async handleRideStarted(orderRequest: OrderRequestEntity, driver: UserEntity) {
    const clientId = orderRequest.getPropsCopy().clientId.value;
    const orderId = orderRequest.id.value;
    const driverId = driver.id.value;

    try {
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —á—Ç–æ –ø–æ–µ–∑–¥–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å
      await this.notifyClient(clientId, 'rideStarted', {
        orderId,
        driverId,
        driver: driver.getPropsCopy(),
        order: orderRequest.getPropsCopy(),
        message: '–ü–æ–µ–∑–¥–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å',
        timestamp: Date.now()
      });

      console.log(`üöÄ –ü–æ–µ–∑–¥–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å: –∑–∞–∫–∞–∑ ${orderId}, –≤–æ–¥–∏—Ç–µ–ª—å ${driverId}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞—á–∞–ª–∞ –ø–æ–µ–∑–¥–∫–∏:', error);
    }
  }

  async handleRideEnded(orderRequest: OrderRequestEntity, driver: UserEntity) {
    const clientId = orderRequest.getPropsCopy().clientId.value;
    const orderId = orderRequest.id.value;
    const driverId = driver.id.value;

    try {
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —á—Ç–æ –ø–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
      await this.notifyClient(clientId, 'rideEnded', {
        orderId,
        driverId,
        driver: driver.getPropsCopy(),
        order: orderRequest.getPropsCopy(),
        message: '–ü–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
        timestamp: Date.now()
      });

      console.log(`üèÅ –ü–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –∑–∞–∫–∞–∑ ${orderId}, –≤–æ–¥–∏—Ç–µ–ª—å ${driverId}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏:', error);
    }
  }

  async handleOrderCancelledByClient(orderRequest: OrderRequestEntity, reason: string = 'cancelled_by_client') {
    const orderId = orderRequest.id.value;
    const driverId = orderRequest.getPropsCopy().driverId?.value;
    const clientId = orderRequest.getPropsCopy().clientId.value;

    try {
      // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –±—ã–ª –ø—Ä–∏–Ω—è—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–º - —É–≤–µ–¥–æ–º–ª—è–µ–º –µ–≥–æ –æ–± –æ—Ç–º–µ–Ω–µ
      if (driverId) {
        await this.notifyDriver(driverId, 'orderCancelledByClient', {
          orderId,
          clientId,
          reason,
          message: '–ö–ª–∏–µ–Ω—Ç –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑',
          timestamp: Date.now()
        });
      }

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
      await this.broadcastToOnlineDrivers('orderDeleted', {
        orderId,
        reason: 'cancelled_by_client',
        timestamp: Date.now()
      });

      console.log(`üö´ –ó–∞–∫–∞–∑ ${orderId} –æ—Ç–º–µ–Ω–µ–Ω –∫–ª–∏–µ–Ω—Ç–æ–º. –ü—Ä–∏—á–∏–Ω–∞: ${reason}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–º:', error);
    }
  }

  async handleOrderCancelledByDriver(orderRequest: OrderRequestEntity, driver: UserEntity, reason: string = 'cancelled_by_driver') {
    const orderId = orderRequest.id.value;
    const driverId = driver.id.value;
    const clientId = orderRequest.getPropsCopy().clientId.value;

    try {
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–º
      await this.notifyClient(clientId, 'orderCancelledByDriver', {
        orderId,
        driverId,
        driver: driver.getPropsCopy(),
        reason,
        message: '–í–æ–¥–∏—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑',
        timestamp: Date.now()
      });

      // –ó–∞–∫–∞–∑ —Å–Ω–æ–≤–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è –¥—Ä—É–≥–∏—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
      await this.broadcastToOnlineDrivers('newOrder', {
        id: orderId,
        from: orderRequest.getPropsCopy().from,
        to: orderRequest.getPropsCopy().to,
        price: orderRequest.getPropsCopy().price,
        orderType: orderRequest.getPropsCopy().orderType,
        clientId: clientId,
        lat: orderRequest.getPropsCopy().lat,
        lng: orderRequest.getPropsCopy().lng,
        message: '–ó–∞–∫–∞–∑ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω',
        timestamp: Date.now()
      });

      console.log(`üö´ –ó–∞–∫–∞–∑ ${orderId} –æ—Ç–º–µ–Ω–µ–Ω –≤–æ–¥–∏—Ç–µ–ª–µ–º ${driverId}. –ü—Ä–∏—á–∏–Ω–∞: ${reason}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–º:', error);
    }
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∑–∏—Ü–∏–π –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –∫–ª–∏–µ–Ω—Ç–∞–º (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
  async broadcastDriversLocationToClients() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏
      const activeOrders = await this.orderRequestRepository.findMany({
        orderStatus: { $in: ['STARTED', 'WAITING', 'ONGOING'] } as any
      });

      for (const order of activeOrders) {
        const driverId = order.getPropsCopy().driverId?.value;
        const clientId = order.getPropsCopy().clientId.value;

        if (driverId && clientId) {
          // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∑–∏—Ü–∏—é –≤–æ–¥–∏—Ç–µ–ª—è –∏–∑ –∫–µ—à–∞
          const location = await this.cacheStorageService.getDriverLocation(driverId);
          
          if (location) {
            await this.notifyClient(clientId, 'driverLocation', {
              lat: location.latitude,
              lng: location.longitude,
              driverId,
              orderId: order.id.value,
              orderStatus: order.getPropsCopy().orderStatus,
              timestamp: Date.now()
            });
          }
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–∑–∏—Ü–∏–π –≤–æ–¥–∏—Ç–µ–ª–µ–π:', error);
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  getConnectionStats() {
    return {
      clients: this.clientConnections.size,
      drivers: this.driverConnections.size,
      onlineDrivers: this.onlineDrivers.size,
      totalSockets: this.server.sockets.sockets.size
    };
  }

  isDriverOnline(driverId: string): boolean {
    return this.onlineDrivers.has(driverId);
  }

  isClientConnected(userId: string): boolean {
    return this.clientConnections.has(userId);
  }

  // –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  private getTotalConnections(): number {
    let total = 0;
    for (const connections of this.clientConnections.values()) {
      total += connections.size;
    }
    for (const connections of this.driverConnections.values()) {
      total += connections.size;
    }
    return total;
  }

  async emitEvent(userId: string, event: string, order: OrderRequestEntity, driver: UserEntity) {
    try {
      const data = {
        order: order.getPropsCopy(),
        status: order.getPropsCopy().orderStatus,
        driver: driver.getPropsCopy(),
        timestamp: Date.now()
      };

      await this.notifyClient(userId, event, data);
      
      console.log(`üì§ –°–æ–±—ã—Ç–∏–µ ${event} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É ${userId}`);
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è ${event} –∫–ª–∏–µ–Ω—Ç—É ${userId}:`, error);
    }
  }
}

