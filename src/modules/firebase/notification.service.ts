import { Injectable } from '@nestjs/common';
import * as admin from 'firebase-admin';
import firebaseAdmin from './firebase-admin.config';

@Injectable()
export class NotificationService {
  private messaging: admin.messaging.Messaging;

  constructor() {
    try {
      this.messaging = firebaseAdmin.messaging();
      console.log('üì± NotificationService: Firebase Messaging –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.error('‚ùå NotificationService: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ messaging:', error);
    }
  }

  async sendNotification(token: string, title: string, body: string, data: Record<string, string> = {}): Promise<void> {
    try {
      if (!token || !title || !body) {
        console.error('‚ùå Firebase: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
        throw new Error('Invalid parameters. Token, title, and body are required.');
      }

      console.log(`üì± Firebase: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —Ç–æ–∫–µ–Ω ${token.substring(0, 20)}...`);
      console.log(`üì± Firebase: –ó–∞–≥–æ–ª–æ–≤–æ–∫: "${title}", –¢–µ–∫—Å—Ç: "${body}"`);

      const message = {
        notification: {
          title,
          body,
        },
        android: {
          notification: {
            sound: 'default',
            channelId: 'default',
            priority: 'high' as const,
          },
        },
        apns: {
          payload: {
            aps: {
              sound: 'default',
              badge: 1,
              alert: {
                title,
                body,
              },
            },
          },
        },
        data,
        token,
      };

      const result = await this.messaging.send(message);
      console.log(`‚úÖ Firebase: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, ID: ${result}`);
      
    } catch (error: any) {
      console.error('‚ùå Firebase: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      
      // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫ Firebase
      if (error.code === 'messaging/registration-token-not-registered') {
        console.error('üö´ Firebase: –¢–æ–∫–µ–Ω –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª');
      } else if (error.code === 'messaging/invalid-registration-token') {
        console.error('üö´ Firebase: –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
      } else if (error.code === 'messaging/mismatched-credential') {
        console.error('üö´ Firebase: –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      } else {
        console.error('üö´ Firebase: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
      }
      
      throw error;
    }
  }

  async sendNotificationByUserId(title: string, body: string, deviceToken: string): Promise<void> {
    if (!deviceToken) {
      console.warn('‚ö†Ô∏è Firebase: –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±–µ–∑ deviceToken');
      return;
    }

    if (!this.messaging) {
      console.error('‚ùå Firebase: Messaging –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    if (deviceToken.length < 10 || deviceToken === 'test') {
      console.warn(`‚ö†Ô∏è Firebase: –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π deviceToken: ${deviceToken.substring(0, 20)}...`);
      return;
    }

    const message: admin.messaging.Message = {
      notification: {
        title,
        body,
      },
      data: {
        timestamp: new Date().toISOString(),
      },
      token: deviceToken,
      android: {
        priority: 'high',
        notification: {
          sound: 'default',
          priority: 'high',
        },
      },
      apns: {
        payload: {
          aps: {
            sound: 'default',
          },
        },
      },
    };

    try {
      console.log(`üì± Firebase: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ userId –Ω–∞ —Ç–æ–∫–µ–Ω ${deviceToken.substring(0, 20)}...`);
      console.log(`üì± Firebase: –ó–∞–≥–æ–ª–æ–≤–æ–∫: "${title}", –¢–µ–∫—Å—Ç: "${body}"`);
      
      const response = await this.messaging.send(message);
      console.log(`‚úÖ Firebase: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. Message ID: ${response}`);
      
    } catch (error) {
      console.error('‚ùå Firebase: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ userId:', error);
      
      // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
      if (error.code) {
        switch (error.code) {
          case 'messaging/invalid-registration-token':
            console.log('üîç Firebase: –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
            break;
          case 'messaging/registration-token-not-registered':
            console.log('üîç Firebase: –¢–æ–∫–µ–Ω –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
            break;
          case 'messaging/invalid-argument':
            console.log('üîç Firebase: –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è');
            break;
          case 'app/invalid-credential':
          case 'auth/invalid-credential':
            console.log('üîç Firebase: –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ service account');
            break;
          default:
            console.log(`üîç Firebase: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.code}`);
        }
      }
      
      // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
    }
  }

  async sendNotificationToTopic(title: string, body: string, topic: string): Promise<void> {
    if (!this.messaging) {
      console.error('‚ùå Firebase: Messaging –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return;
    }

    const message: admin.messaging.Message = {
      notification: {
        title,
        body,
      },
      topic,
    };

    try {
      console.log(`üì¢ Firebase: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —Ç–æ–ø–∏–∫ "${topic}"`);
      const response = await this.messaging.send(message);
      console.log(`‚úÖ Firebase: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Ç–æ–ø–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. Message ID: ${response}`);
    } catch (error) {
      console.error(`‚ùå Firebase: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —Ç–æ–ø–∏–∫ "${topic}":`, error);
    }
  }

  async validateToken(token: string): Promise<boolean> {
    if (!this.messaging || !token || token === 'test') {
      return false;
    }

    try {
      // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      await this.messaging.send({
        data: { test: 'validation' },
        token,
      }, true); // dry run
      return true;
    } catch (error) {
      console.log(`üîç Firebase: –¢–æ–∫–µ–Ω ${token.substring(0, 20)}... –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π:`, error.code);
      return false;
    }
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  async testNotification(deviceToken: string): Promise<boolean> {
    try {
      console.log(`üß™ Firebase: –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —Ç–æ–∫–µ–Ω ${deviceToken.substring(0, 20)}...`);
      
      await this.sendNotificationByUserId(
        'Aday Go - –¢–µ—Å—Ç',
        '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Firebase',
        deviceToken
      );
      
      return true;
    } catch (error) {
      console.error('‚ùå Firebase: –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:', error);
      return false;
    }
  }
}
