import { Injectable } from '@nestjs/common';
import admin from './firebase-admin.config';

@Injectable()
export class NotificationService {
  async sendNotification(token: string, title: string, body: string, data: Record<string, string> = {}): Promise<void> {
    try {
      if (!token || !title || !body) {
        console.error('‚ùå Firebase: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
        throw new Error('Invalid parameters. Token, title, and body are required.');
      }

      console.log(`üì± Firebase: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —Ç–æ–∫–µ–Ω ${token.substring(0, 20)}...`);
      console.log(`üì± Firebase: –ó–∞–≥–æ–ª–æ–≤–æ–∫: "${title}", –¢–µ–∫—Å—Ç: "${body}"`);

      const message = {
        notification: {
          title,
          body,
        },
        android: {
          notification: {
            sound: 'default',
            channelId: 'default',
            priority: 'high' as const,
          },
        },
        apns: {
          payload: {
            aps: {
              sound: 'default',
              badge: 1,
              alert: {
                title,
                body,
              },
            },
          },
        },
        data,
        token,
      };

      const result = await admin.messaging().send(message);
      console.log(`‚úÖ Firebase: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, ID: ${result}`);
      
    } catch (error: any) {
      console.error('‚ùå Firebase: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      
      // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫ Firebase
      if (error.code === 'messaging/registration-token-not-registered') {
        console.error('üö´ Firebase: –¢–æ–∫–µ–Ω –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª');
      } else if (error.code === 'messaging/invalid-registration-token') {
        console.error('üö´ Firebase: –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
      } else if (error.code === 'messaging/mismatched-credential') {
        console.error('üö´ Firebase: –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      } else {
        console.error('üö´ Firebase: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
      }
      
      throw error;
    }
  }

  async sendNotificationByUserId(title: string, body: string, deviceToken: string): Promise<void> {
    try {
      if (!deviceToken || !title || !body) {
        console.error('‚ùå Firebase: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ userId');
        throw new Error('Invalid parameters. Device token, title, and body are required.');
      }

      console.log(`üì± Firebase: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ userId –Ω–∞ —Ç–æ–∫–µ–Ω ${deviceToken.substring(0, 20)}...`);
      console.log(`üì± Firebase: –ó–∞–≥–æ–ª–æ–≤–æ–∫: "${title}", –¢–µ–∫—Å—Ç: "${body}"`);

      const message = {
        notification: {
          title,
          body,
        },
        android: {
          notification: {
            sound: 'default',
            channelId: 'default',
            priority: 'high' as const,
            icon: 'ic_notification',
          },
        },
        apns: {
          payload: {
            aps: {
              sound: 'default',
              badge: 1,
              alert: {
                title,
                body,
              },
              'content-available': 1,
            },
          },
        },
        data: {
          title,
          body,
          timestamp: Date.now().toString(),
        },
        token: deviceToken,
      };

      const result = await admin.messaging().send(message);
      console.log(`‚úÖ Firebase: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ userId —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, ID: ${result}`);
      
    } catch (error: any) {
      console.error('‚ùå Firebase: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ userId:', error);
      
      // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫ Firebase
      if (error.code === 'messaging/registration-token-not-registered') {
        console.error('üö´ Firebase: –¢–æ–∫–µ–Ω –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª - –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å deviceToken');
      } else if (error.code === 'messaging/invalid-registration-token') {
        console.error('üö´ Firebase: –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞');
      } else if (error.code === 'messaging/mismatched-credential') {
        console.error('üö´ Firebase: –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Firebase');
      } else if (error.code === 'messaging/authentication-error') {
        console.error('üö´ Firebase: –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ service account');
      } else {
        console.error('üö´ Firebase: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
      }
      
      // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
      // throw error;
    }
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  async testNotification(deviceToken: string): Promise<boolean> {
    try {
      console.log(`üß™ Firebase: –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —Ç–æ–∫–µ–Ω ${deviceToken.substring(0, 20)}...`);
      
      await this.sendNotificationByUserId(
        'Aday Go - –¢–µ—Å—Ç',
        '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Firebase',
        deviceToken
      );
      
      return true;
    } catch (error) {
      console.error('‚ùå Firebase: –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:', error);
      return false;
    }
  }
}
