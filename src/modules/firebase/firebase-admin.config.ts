import * as admin from 'firebase-admin';
import * as path from 'path';
import * as fs from 'fs';

// –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ–∞–π–ª–∞
const possibleServiceAccountPaths = [
  path.join(__dirname, 'aktau-go-420cf0ba8c4c.json')
];

function getValidServiceAccountPath(): string | null {
  for (const filePath of possibleServiceAccountPaths) {
    if (fs.existsSync(filePath)) {
      console.log(`üîë Firebase: –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª service account: ${filePath}`);

      try {
        const content = fs.readFileSync(filePath, 'utf8');
        const parsed = JSON.parse(content);
        console.log(`üìÑ Firebase: –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω. Project ID: ${parsed.project_id || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
      } catch (readError) {
        console.error(`‚ùå Firebase: –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON —Ñ–∞–π–ª–∞: ${filePath}`);
        throw readError;
      }

      return filePath;
    } else {
      console.log(`üîç Firebase: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: ${filePath}`);
    }
  }
  console.log(`‚ö†Ô∏è Firebase: Service account —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ${__dirname}. Firebase –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω.`);
  return null;
}

function validateServiceAccount(filePath: string): any {
  try {
    const serviceAccount = JSON.parse(fs.readFileSync(filePath, 'utf8'));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    const requiredFields = ['project_id', 'private_key', 'client_email'];
    for (const field of requiredFields) {
      if (!serviceAccount[field]) {
        throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: ${field}`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å private_key
    if (!serviceAccount.private_key.includes('BEGIN PRIVATE KEY')) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç private_key');
    }
    
    console.log(`‚úÖ Firebase: Service account –≤–∞–ª–∏–¥–Ω—ã–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${serviceAccount.project_id}`);
    return serviceAccount;
    
  } catch (error) {
    console.error(`‚ùå Firebase: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ service account:`, error);
    throw error;
  }
}

function initializeFirebaseAdmin() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–æ–≤–∞–Ω –ª–∏ —É–∂–µ
  if (admin.apps.length > 0) {
    console.log('üîÑ Firebase: Admin SDK —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    return admin.app();
  }

  try {
    const serviceAccountPath = getValidServiceAccountPath();
    
    if (!serviceAccountPath) {
      console.log('‚ö†Ô∏è Firebase: Service account –Ω–µ –Ω–∞–π–¥–µ–Ω, Firebase –æ—Ç–∫–ª—é—á–µ–Ω');
      return null;
    }
    
    const serviceAccount = validateServiceAccount(serviceAccountPath);
    
    const app = admin.initializeApp({
      credential: admin.credential.cert(serviceAccount),
      projectId: serviceAccount.project_id,
    });
    
    console.log(`üöÄ Firebase: Admin SDK —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${serviceAccount.project_id}`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    admin.messaging().sendToDevice('test', {
      notification: { title: 'test', body: 'test' }
    }).catch(() => {
      console.log('üß™ Firebase: –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ (–æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞)');
    });
    
    return app;
    
  } catch (error) {
    console.error('‚ùå Firebase: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    console.log('‚ö†Ô∏è Firebase: –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ Firebase');
    return null;
  }
}

export default initializeFirebaseAdmin();
